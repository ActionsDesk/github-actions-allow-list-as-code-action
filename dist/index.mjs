import{createRequire as __WEBPACK_EXTERNAL_createRequire}from"module";var __webpack_modules__={94:module=>{module.exports=eval("require")("@actions/core")},651:module=>{module.exports=eval("require")("@octokit/core")},882:module=>{module.exports=eval("require")("@octokit/plugin-enterprise-cloud")},205:module=>{module.exports=eval("require")("js-yaml")}};var __webpack_module_cache__={};function __nccwpck_require__(e){var t=__webpack_module_cache__[e];if(t!==undefined){return t.exports}var i=__webpack_module_cache__[e]={exports:{}};var o=true;try{__webpack_modules__[e](i,i.exports,__nccwpck_require__);o=false}finally{if(o)delete __webpack_module_cache__[e]}return i.exports}if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=new URL(".",import.meta.url).pathname.slice(import.meta.url.match(/^file:\/\/\/\w:/)?1:0,-1)+"/";var __webpack_exports__={};(()=>{const e=__WEBPACK_EXTERNAL_createRequire(import.meta.url)("path");var t=__nccwpck_require__(94);const i=__WEBPACK_EXTERNAL_createRequire(import.meta.url)("fs");var o=__nccwpck_require__(651);var r=__nccwpck_require__(882);var s=__nccwpck_require__(205);const a=o.Octokit.plugin(r.enterpriseCloud);class ActionPolicy{constructor({token:e,enterprise:t,organization:i,allowListPath:r,ghApiUrl:s}){if(!e){throw new Error("`token` is required")}this.octokit=new a({auth:e,baseUrl:s});(0,o.info)(`GitHub API URL: ${s}`);if(!t&&!i){throw new Error("`enterprise` or `organization` is required")}this.enterprise=t;this.organization=i;if(!r){throw new Error("`allowListPath` is required")}this.allowListPath=r;this.allowList=undefined;this.policy=undefined}async loadCurrentEnterpriseActionsPolicy(){const{enterprise:e,octokit:t}=this;try{const{data:{allowed_actions:i,enabled_organizations:o}}=await t.request("GET /enterprises/{enterprise}/actions/permissions",{enterprise:e});if(o==="none"){throw new Error(`GitHub Actions disabled`)}let r=o;if(r!=="all"){const{data:{organizations:i}}=await t.request("GET /enterprises/{enterprise}/actions/permissions/organizations",{enterprise:e});r=i.map((e=>e.login))}const s=i;this.policy={organizations:r,actions:s};if(s==="selected"){const{data:i}=await t.request("GET /enterprises/{enterprise}/actions/permissions/selected-actions",{enterprise:e});this.policy.selected=i}else{throw new Error('GitHub Actions allow list automation is only possible with "Allow select actions" selected!')}}catch(t){if(t.status===404)throw new Error(`${e} is not a GitHub Enterprise Cloud account`);else throw t}}async updateEnterpriseActionsAllowList(){const{enterprise:e,octokit:t,policy:{actions:i,selected:o},allowList:r}=this;if(i==="selected"&&o.patterns_allowed){try{const{status:i}=await t.request("PUT /enterprises/{enterprise}/actions/permissions/selected-actions",{enterprise:e,patterns_allowed:r});if(i!==204){throw new Error(`Failed to update GitHub Actions allow list!`)}}catch(e){throw new Error(`Failed to update GitHub Actions allow list!`)}}o.patterns_allowed=r;return true}async loadCurrentOrganizationActionsPolicy(){const{organization:e,octokit:t}=this;try{const{data:{allowed_actions:i}}=await t.request("GET /orgs/{org}/actions/permissions",{org:e});const o=i;if(o===undefined){throw new Error(`GitHub Actions disabled`)}this.policy={organization:e,actions:o};if(o==="selected"){const{data:i}=await t.request("GET /orgs/{org}/actions/permissions/selected-actions",{org:e});this.policy.selected=i}else{throw new Error('GitHub Actions allow list automation is only possible with "Allow select actions" selected!')}}catch(t){if(t.status===404)throw new Error(`${e} is not a GitHub organization account`);else throw t}}async updateOrganizationActionsAllowList(){const{organization:e,octokit:t,policy:{actions:i,selected:o},allowList:r}=this;if(i==="selected"&&o.patterns_allowed){try{const{status:i}=await t.request("PUT /orgs/{org}/actions/permissions/selected-actions",{org:e,patterns_allowed:r});if(i!==204){throw new Error(`Failed to update GitHub Actions allow list!`)}}catch(e){throw new Error(e.errors||`Failed to update GitHub Actions allow list!`)}}o.patterns_allowed=r;return true}getPolicy(){return this.policy}async loadAllowListYAML(){const e=(0,i.readFileSync)(this.allowListPath,"utf8");const{actions:t}=(0,s.load)(e,{json:true});this.allowList=[...new Set(t)];return t}}const n=ActionPolicy;(async()=>{try{const i=(0,t.getInput)("token",{required:true});const o=(0,t.getInput)("enterprise",{required:false})||null;const r=(0,t.getInput)("organization",{required:false})||null;const s=(0,t.getInput)("gh_api_url",{required:false})||"https://api.github.com";if(o&&r){throw new Error("Please provide only one of: enterprise, organization")}const a=(0,t.getInput)("allow_list_path");const l=process.env.GITHUB_WORKSPACE;const c=(0,e.join)(l,a);const{dir:u}=(0,e.parse)(c);if(u.indexOf(l)<0){throw new Error(`${a} is not an allowed path`)}const p=new n({token:i,enterprise:o,organization:r,allowListPath:c,ghApiUrl:s});if(o)await p.loadCurrentEnterpriseActionsPolicy();if(r)await p.loadCurrentOrganizationActionsPolicy();(0,t.info)(`Existing GitHub Actions allow list loaded for ${o||r}`);await p.loadAllowListYAML();(0,t.info)(`Loaded updated allow list from file ${c}`);if(o)await p.updateEnterpriseActionsAllowList();if(r)await p.updateOrganizationActionsAllowList();(0,t.info)(`GitHub Actions allow list updated for ${o||r}`);(0,t.setOutput)(`GitHub Actions allow list updated for ${o||r}`)}catch(e){(0,t.setFailed)(e.message)}})()})();